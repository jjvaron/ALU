// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/04/2019 18:21:58"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    multiplicador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module multiplicador_vlg_sample_tst(
	A,
	B,
	sampler_tx
);
input [7:0] A;
input [7:0] B;
output sampler_tx;

reg sample;
time current_time;
always @(A or B)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module multiplicador_vlg_check_tst (
	product_out,
	sampler_rx
);
input [15:0] product_out;
input sampler_rx;

reg [15:0] product_out_expected;

reg [15:0] product_out_prev;

reg [15:0] product_out_expected_prev;

reg [15:0] last_product_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	product_out_prev = product_out;
end

// update expected /o prevs

always @(trigger)
begin
	product_out_expected_prev = product_out_expected;
end


// expected product_out[ 15 ]
initial
begin
	product_out_expected[15] = 1'bX;
end 
// expected product_out[ 14 ]
initial
begin
	product_out_expected[14] = 1'bX;
end 
// expected product_out[ 13 ]
initial
begin
	product_out_expected[13] = 1'bX;
end 
// expected product_out[ 12 ]
initial
begin
	product_out_expected[12] = 1'bX;
end 
// expected product_out[ 11 ]
initial
begin
	product_out_expected[11] = 1'bX;
end 
// expected product_out[ 10 ]
initial
begin
	product_out_expected[10] = 1'bX;
end 
// expected product_out[ 9 ]
initial
begin
	product_out_expected[9] = 1'bX;
end 
// expected product_out[ 8 ]
initial
begin
	product_out_expected[8] = 1'bX;
end 
// expected product_out[ 7 ]
initial
begin
	product_out_expected[7] = 1'bX;
end 
// expected product_out[ 6 ]
initial
begin
	product_out_expected[6] = 1'bX;
end 
// expected product_out[ 5 ]
initial
begin
	product_out_expected[5] = 1'bX;
end 
// expected product_out[ 4 ]
initial
begin
	product_out_expected[4] = 1'bX;
end 
// expected product_out[ 3 ]
initial
begin
	product_out_expected[3] = 1'bX;
end 
// expected product_out[ 2 ]
initial
begin
	product_out_expected[2] = 1'bX;
end 
// expected product_out[ 1 ]
initial
begin
	product_out_expected[1] = 1'bX;
end 
// expected product_out[ 0 ]
initial
begin
	product_out_expected[0] = 1'bX;
end 
// generate trigger
always @(product_out_expected or product_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected product_out = %b | ",product_out_expected_prev);
	$display("| real product_out = %b | ",product_out_prev);
`endif
	if (
		( product_out_expected_prev[0] !== 1'bx ) && ( product_out_prev[0] !== product_out_expected_prev[0] )
		&& ((product_out_expected_prev[0] !== last_product_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_out_expected_prev);
		$display ("     Real value = %b", product_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_product_out_exp[0] = product_out_expected_prev[0];
	end
	if (
		( product_out_expected_prev[1] !== 1'bx ) && ( product_out_prev[1] !== product_out_expected_prev[1] )
		&& ((product_out_expected_prev[1] !== last_product_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_out_expected_prev);
		$display ("     Real value = %b", product_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_product_out_exp[1] = product_out_expected_prev[1];
	end
	if (
		( product_out_expected_prev[2] !== 1'bx ) && ( product_out_prev[2] !== product_out_expected_prev[2] )
		&& ((product_out_expected_prev[2] !== last_product_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_out_expected_prev);
		$display ("     Real value = %b", product_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_product_out_exp[2] = product_out_expected_prev[2];
	end
	if (
		( product_out_expected_prev[3] !== 1'bx ) && ( product_out_prev[3] !== product_out_expected_prev[3] )
		&& ((product_out_expected_prev[3] !== last_product_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_out_expected_prev);
		$display ("     Real value = %b", product_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_product_out_exp[3] = product_out_expected_prev[3];
	end
	if (
		( product_out_expected_prev[4] !== 1'bx ) && ( product_out_prev[4] !== product_out_expected_prev[4] )
		&& ((product_out_expected_prev[4] !== last_product_out_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_out_expected_prev);
		$display ("     Real value = %b", product_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_product_out_exp[4] = product_out_expected_prev[4];
	end
	if (
		( product_out_expected_prev[5] !== 1'bx ) && ( product_out_prev[5] !== product_out_expected_prev[5] )
		&& ((product_out_expected_prev[5] !== last_product_out_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_out_expected_prev);
		$display ("     Real value = %b", product_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_product_out_exp[5] = product_out_expected_prev[5];
	end
	if (
		( product_out_expected_prev[6] !== 1'bx ) && ( product_out_prev[6] !== product_out_expected_prev[6] )
		&& ((product_out_expected_prev[6] !== last_product_out_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_out_expected_prev);
		$display ("     Real value = %b", product_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_product_out_exp[6] = product_out_expected_prev[6];
	end
	if (
		( product_out_expected_prev[7] !== 1'bx ) && ( product_out_prev[7] !== product_out_expected_prev[7] )
		&& ((product_out_expected_prev[7] !== last_product_out_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_out_expected_prev);
		$display ("     Real value = %b", product_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_product_out_exp[7] = product_out_expected_prev[7];
	end
	if (
		( product_out_expected_prev[8] !== 1'bx ) && ( product_out_prev[8] !== product_out_expected_prev[8] )
		&& ((product_out_expected_prev[8] !== last_product_out_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_out_expected_prev);
		$display ("     Real value = %b", product_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_product_out_exp[8] = product_out_expected_prev[8];
	end
	if (
		( product_out_expected_prev[9] !== 1'bx ) && ( product_out_prev[9] !== product_out_expected_prev[9] )
		&& ((product_out_expected_prev[9] !== last_product_out_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_out_expected_prev);
		$display ("     Real value = %b", product_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_product_out_exp[9] = product_out_expected_prev[9];
	end
	if (
		( product_out_expected_prev[10] !== 1'bx ) && ( product_out_prev[10] !== product_out_expected_prev[10] )
		&& ((product_out_expected_prev[10] !== last_product_out_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_out_expected_prev);
		$display ("     Real value = %b", product_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_product_out_exp[10] = product_out_expected_prev[10];
	end
	if (
		( product_out_expected_prev[11] !== 1'bx ) && ( product_out_prev[11] !== product_out_expected_prev[11] )
		&& ((product_out_expected_prev[11] !== last_product_out_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_out_expected_prev);
		$display ("     Real value = %b", product_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_product_out_exp[11] = product_out_expected_prev[11];
	end
	if (
		( product_out_expected_prev[12] !== 1'bx ) && ( product_out_prev[12] !== product_out_expected_prev[12] )
		&& ((product_out_expected_prev[12] !== last_product_out_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product_out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_out_expected_prev);
		$display ("     Real value = %b", product_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_product_out_exp[12] = product_out_expected_prev[12];
	end
	if (
		( product_out_expected_prev[13] !== 1'bx ) && ( product_out_prev[13] !== product_out_expected_prev[13] )
		&& ((product_out_expected_prev[13] !== last_product_out_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product_out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_out_expected_prev);
		$display ("     Real value = %b", product_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_product_out_exp[13] = product_out_expected_prev[13];
	end
	if (
		( product_out_expected_prev[14] !== 1'bx ) && ( product_out_prev[14] !== product_out_expected_prev[14] )
		&& ((product_out_expected_prev[14] !== last_product_out_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product_out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_out_expected_prev);
		$display ("     Real value = %b", product_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_product_out_exp[14] = product_out_expected_prev[14];
	end
	if (
		( product_out_expected_prev[15] !== 1'bx ) && ( product_out_prev[15] !== product_out_expected_prev[15] )
		&& ((product_out_expected_prev[15] !== last_product_out_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product_out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_out_expected_prev);
		$display ("     Real value = %b", product_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_product_out_exp[15] = product_out_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module multiplicador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
// wires                                               
wire [15:0] product_out;

wire sampler;                             

// assign statements (if any)                          
multiplicador i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.product_out(product_out)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
	A[1] = #20000 1'b1;
	A[1] = #340000 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
	A[0] = #60000 1'b1;
	A[0] = #110000 1'b0;
	A[0] = #90000 1'b1;
	A[0] = #100000 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
	B[1] = #170000 1'b1;
	B[1] = #180000 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
	B[0] = #170000 1'b0;
end 

multiplicador_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.sampler_tx(sampler)
);

multiplicador_vlg_check_tst tb_out(
	.product_out(product_out),
	.sampler_rx(sampler)
);
endmodule

